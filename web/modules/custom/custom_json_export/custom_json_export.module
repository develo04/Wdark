<?php

/**
 * @file
 * Contains custom_json_export module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\block\Entity\Block;
use Drupal\file\Entity\File;

/**
 * Implements hook_help().
 */
function custom_json_export_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.custom_json_export':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Este módulo permite exportar nodos y bloques con párrafos anidados a JSON en un formato personalizado.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_operation().
 */
function custom_json_export_entity_operation(EntityInterface $entity) {
  $operations = [];
  
  if ($entity instanceof NodeInterface) {
    $operations['export_json'] = [
      'title' => t('Exportar a JSON'),
      'weight' => 50,
      'url' => \Drupal\Core\Url::fromRoute('custom_json_export.export', ['node' => $entity->id()]),
    ];
  }
  
  return $operations;
}

/**
 * Procesa un nodo completo para exportación.
 */
function _custom_json_export_process_node(NodeInterface $node) {
  $result = [
    'nid' => $node->id(),
    'uuid' => $node->uuid(),
    'type' => $node->getType(),
    'title' => $node->getTitle(),
    'status' => $node->isPublished(),
    'created' => $node->getCreatedTime(),
    'changed' => $node->getChangedTime(),
    'fields' => [],
  ];
  
  // Procesar campos
  $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $node->getType());
  
  foreach ($field_definitions as $field_name => $field_definition) {
    // Excluir campos básicos ya incluidos y campos del sistema
    if (in_array($field_name, ['nid', 'uuid', 'vid', 'type', 'title', 'status', 'created', 'changed', 'langcode'])) {
      continue;
    }
    
    // Solo procesar si el nodo tiene este campo
    if ($node->hasField($field_name)) {
      $field = $node->get($field_name);
      $field_type = $field_definition->getType();
      
      // Procesar según tipo de campo
      switch ($field_type) {
        case 'entity_reference_revisions': // Para párrafos
          if ($field_definition->getSetting('target_type') == 'paragraph') {
            $paragraphs = [];
            foreach ($field->referencedEntities() as $paragraph) {
              $paragraphs[] = _custom_json_export_process_paragraph($paragraph);
            }
            
            // Ordenar por peso si existe
            usort($paragraphs, function($a, $b) {
              $weight_a = isset($a['weight']) ? $a['weight'] : 0;
              $weight_b = isset($b['weight']) ? $b['weight'] : 0;
              return $weight_a - $weight_b;
            });
            
            $result['fields'][$field_name] = $paragraphs;
          }
          break;
          
        case 'entity_reference': // Para referencias a entidades (como media)
          $referenced_entities = [];
          foreach ($field->referencedEntities() as $referenced_entity) {
            $entity_values = [
              'id' => $referenced_entity->id(),
              'type' => $referenced_entity->getEntityTypeId(),
              'bundle' => $referenced_entity->bundle(),
            ];
            
            // Si es una entidad media de tipo image, procesar la URL y el label
            if ($referenced_entity->getEntityTypeId() === 'media' && $referenced_entity->bundle() === 'image') {
              // Obtener el archivo asociado al media
              if ($referenced_entity->hasField('field_media_image') && !$referenced_entity->get('field_media_image')->isEmpty()) {
                $file = File::load($referenced_entity->get('field_media_image')->target_id);
                if ($file) {
                  $entity_values['label'] = $file->getFilename(); // Nombre del archivo como label
                  $entity_values['src'] = \Drupal::service('file_url_generator')->generateString($file->getFileUri()); // URL relativa
                }
              }
            }
            
            // Si es una entity con label, incluirla (por si acaso)
            if (method_exists($referenced_entity, 'label')) {
              $entity_values['label'] = $entity_values['label'] ?: $referenced_entity->label();
            }
            
            // Si tiene campo de peso, incluirlo
            if (method_exists($referenced_entity, 'hasField') && 
                $referenced_entity->hasField('weight') && 
                !$referenced_entity->get('weight')->isEmpty()) {
              $entity_values['weight'] = (int) $referenced_entity->get('weight')->value;
            }
            
            $referenced_entities[] = $entity_values;
          }
          
          // Ordenar por peso si existe
          usort($referenced_entities, function($a, $b) {
            $weight_a = isset($a['weight']) ? $a['weight'] : 0;
            $weight_b = isset($b['weight']) ? $b['weight'] : 0;
            return $weight_a - $weight_b;
          });
          
          $result['fields'][$field_name] = $referenced_entities;
          break;
          
        case 'image':
        case 'file':
          $files = [];
          foreach ($field->referencedEntities() as $file) {
            $files[] = [
              'fid' => $file->id(),
              'filename' => $file->getFilename(),
              'uri' => $file->getFileUri(),
              'url' => \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()),
              'relative_url' => \Drupal::service('file_url_generator')->generateString($file->getFileUri()),
              'filemime' => $file->getMimeType(),
              'filesize' => $file->getSize(),
            ];
          }
          $result['fields'][$field_name] = $files;
          break;
          
        default: // Para campos básicos
          // Si el campo permite múltiples valores
          if ($field->getFieldDefinition()->getFieldStorageDefinition()->getCardinality() !== 1) {
            $values = [];
            foreach ($field->getValue() as $value) {
              if (isset($value['value'])) {
                $values[] = $value['value'];
              } else {
                $values[] = $value;
              }
            }
            $result['fields'][$field_name] = $values;
          } else {
            // Obtener valor único
            $value = $field->getValue();
            if (!empty($value)) {
              if (isset($value[0]['value'])) {
                $result['fields'][$field_name] = $value[0]['value'];
              } else {
                $result['fields'][$field_name] = $value[0];
              }
            }
          }
          break;
      }
    }
  }
  
  return $result;
}

/**
 * Procesa un párrafo y sus párrafos anidados recursivamente.
 */
function _custom_json_export_process_paragraph(Paragraph $paragraph) {
  $result = [];

  switch ($paragraph->getType()) {
    case 'components':
      if ($paragraph->hasField('field_components')) {
        foreach ($paragraph->get('field_components')->referencedEntities() as $sub_paragraph) {
          $sub_data = _custom_json_export_process_paragraph($sub_paragraph);
          if ($sub_data) {
            $result = array_merge($result, $sub_data);
          }
        }
      }
      break;

    case 'title':
      if ($paragraph->hasField('field_subtitle')) {
        $subtitle = $paragraph->get('field_subtitle')->value;
        $result['section-main-banner'] = [
          'id' => '',
          'title' => '',
          'subtitle' => strip_tags($subtitle) ?: '',
        ];
      }
      break;


    case 'button':
      if ($paragraph->hasField('field_link')) {
        $link = $paragraph->get('field_link')->first();
        $result['section-main-banner']['cta'] = [
          'text' => $link->get('title')->getValue() ?: '',
          'link' => $link->getUrl()->toString() ?: '',
        ];
      }
      break;

      case 'about_us':
        $result['section-about-us'] = [
          'id' => '',
          'title' => $paragraph->hasField('field_subtitle') ? $paragraph->get('field_subtitle')->value : '',
        ];
        if ($paragraph->hasField('field_full_html_field')) {
          $result['section-about-us']['description'] = strip_tags($paragraph->get('field_full_html_field')->value) ?: '';
        }
        // Agregamos la extracción del nuevo campo field_cta_text
        if ($paragraph->hasField('field_cta_text')) {
          $result['section-about-us']['cta_text'] = $paragraph->get('field_cta_text')->value ?: '';
        }
        if ($paragraph->hasField('field_item_acerca_de_nosotros')) {
          $skills = [];
          foreach ($paragraph->get('field_item_acerca_de_nosotros')->referencedEntities() as $item) {
            $skills[] = [
              'name' => $item->get('field_text')->value ?: '',
              'percent' => $item->hasField('field_percentage') ? (int) $item->get('field_percentage')->value : 0,
            ];
          }
          if (!empty($skills)) {
            $result['section-about-us']['skills'] = [
              'list' => array_column($skills, 'name'),
              'percents' => array_column($skills, 'percent'),
            ];
          }
        }
        if ($paragraph->hasField('field_link')) {
          $link = $paragraph->get('field_link')->first();
          $result['section-about-us']['cta'] = [
            'text' => $link->get('title')->getValue() ?: '',
          ];
        }
        break;

    case 'cards':
      if ($paragraph->hasField('field_cards_item')) {
        $services = [];
        foreach ($paragraph->get('field_cards_item')->referencedEntities() as $card) {
          $service = [
            'name' => $card->get('field_text')->value ?: '',
            'description' => strip_tags($card->get('field_full_html_field')->value) ?: '',
          ];
          if ($card->hasField('field_link')) {
            $link = $card->get('field_link')->first();
            $service['cta'] = $link->get('title')->getValue() ?: '';
          }
          if ($card->hasField('field_icon')) {
            $icon = $card->get('field_icon')->referencedEntities()[0];
            $file = File::load($icon->get('field_media_image')->target_id);
            $service['image'] = $file ? \Drupal::service('file_url_generator')->generateString($file->getFileUri()) : '';
          }
          if (!empty($service['name']) || !empty($service['description']) || !empty($service['cta']) || !empty($service['image'])) {
            $services[] = $service;
          }
        }
        if (!empty($services)) {
          $result['section-services']['services'] = $services;
        }
      }
      break;
      case 'main_banner':
        $result['section-main-banner'] = [
          'id' => 'inicio',
          'title' => $paragraph->hasField('field_title') ? $paragraph->get('field_title')->value : '',
          'subtitle' => $paragraph->hasField('field_subtitle') ? $paragraph->get('field_subtitle')->value : '',
        ];
        break;
  
      case 'components':
        if ($paragraph->hasField('field_components')) {
          foreach ($paragraph->get('field_components')->referencedEntities() as $sub_paragraph) {
            $sub_data = _custom_json_export_process_paragraph($sub_paragraph);
            if ($sub_data) {
              $result = array_merge($result, $sub_data);
            }
          }
        }
        break;

    case 'componente_aliados':
      $result['section-allies'] = [
        'title' => $paragraph->get('field_subtitle')->value ?: '',
        'allies' => [],
      ];
      if ($paragraph->hasField('field_aliados_item')) {
        $allies = [];
        foreach ($paragraph->get('field_aliados_item')->referencedEntities() as $ally) {
          $image = $ally->get('field_image')->referencedEntities()[0];
          $file = File::load($image->get('field_media_image')->target_id);
          $ally_data = [
            'link' => '',
            'image' => $file ? \Drupal::service('file_url_generator')->generateString($file->getFileUri()) : '',
            'alt' => $image->get('field_media_image')->alt ?: '',
          ];
          if (!empty($ally_data['image']) || !empty($ally_data['alt'])) {
            $allies[] = $ally_data;
          }
        }
        if (!empty($allies)) {
          $result['section-allies']['allies'] = $allies;
        }
      }
      break;

    case 'contact':
      $result['section-contact'] = [
        'title' => '',
        'contact-methods' => [],
      ];
      if ($paragraph->hasField('field_contact_methods')) {
        $methods = [];
        foreach ($paragraph->get('field_contact_methods')->referencedEntities() as $method) {
          $method_data = [
            'type' => $method->get('field_type')->value ?: '',
            'title' => $method->get('field_title')->value ?: '',
            'value' => $method->get('field_value')->value ?: '',
            'image' => $method->hasField('field_image') && $file = File::load($method->get('field_image')->target_id) 
              ? \Drupal::service('file_url_generator')->generateString($file->getFileUri()) 
              : '',
          ];
          if (!empty($method_data['type']) || !empty($method_data['title']) || !empty($method_data['value']) || !empty($method_data['image'])) {
            $methods[] = $method_data;
          }
        }
        if (!empty($methods)) {
          $result['section-contact']['contact-methods'] = $methods;
        }
      }
      break;

      case 'component_find_us':
        $result['section-contact'] = [
          'title' => $paragraph->hasField('field_subtitle') ? $paragraph->get('field_subtitle')->value : '',
          'contact-methods' => [],
        ];
        if ($paragraph->hasField('field_findus_item')) {
          $methods = [];
          foreach ($paragraph->get('field_findus_item')->referencedEntities() as $item) {
            $method = [
              'title' => $item->hasField('field_text') ? $item->get('field_text')->value : '',
            ];
            
            // Determinar el tipo basado en el título
            if (stripos($method['title'], 'LLAMANOS') !== false || stripos($method['title'], 'LLÁMANOS') !== false) {
              $method['type'] = 'phone';
            } elseif (stripos($method['title'], 'UBICANOS') !== false || stripos($method['title'], 'UBÍCANOS') !== false) {
              $method['type'] = 'location';
            } elseif (stripos($method['title'], 'ESCRIBENOS') !== false || stripos($method['title'], 'ESCRÍBENOS') !== false) {
              $method['type'] = 'email';
            } else {
              $method['type'] = '';
            }
      
            // Obtener el texto del enlace (title) para "value" y la URL para "link" (con depuración avanzada)
            if ($item->hasField('field_link') && !$item->get('field_link')->isEmpty()) {
              $link = $item->get('field_link')->first();
              
              // Depuración avanzada: registrar los datos completos de field_link
              \Drupal::logger('custom_json_export')->notice('Datos completos de field_link para item @item_id: @link_data', [
                '@item_id' => $item->id(),
                '@link_data' => var_export($link->toArray(), TRUE), // Usar toArray() para más detalles
              ]);
              \Drupal::logger('custom_json_export')->notice('Valor de title en field_link (getTitle): @title', [
                '@title' => var_export($link->getTitle(), TRUE),
              ]);
              \Drupal::logger('custom_json_export')->notice('Valor de title en field_link (getValue): @value_title', [
                '@value_title' => var_export($link->getValue()[0]['title'] ?? null, TRUE),
              ]);
              \Drupal::logger('custom_json_export')->notice('Valor de uri en field_link: @uri', [
                '@uri' => var_export($link->get('uri')->getValue(), TRUE),
              ]);
      
              // Obtener el texto completo del enlace (title) para "value" usando la solución propuesta
              $link_title = '';
              if ($link && method_exists($link, 'getTitle')) {
                $link_title = $link->getTitle();
              }
      
              // Si getTitle() no funcionó o devolvió un objeto, intentar con el array directamente
              if (empty($link_title) || !is_string($link_title)) {
                $link_value = $link->getValue();
                if (!empty($link_value) && isset($link_value[0]['title'])) {
                  $title_value = $link_value[0]['title'];
                  // Asegurarnos de que obtenemos un string completo del objeto
                  if (is_object($title_value) && method_exists($title_value, '__toString')) {
                    $link_title = (string)$title_value;
                  } elseif (is_string($title_value)) {
                    $link_title = $title_value;
                  }
                }
              }
              $method['value'] = $link_title ?: '';
      
              // Obtener la URL del enlace para "link"
              $method['link'] = $link->getUrl()->toString() ?: '';
            } else {
              $method['value'] = ''; // Valor por defecto si no hay enlace
              $method['link'] = '';
            }
      
            // Procesar la imagen (field_icon)
            if ($item->hasField('field_icon') && !$item->get('field_icon')->isEmpty()) {
              $icon = $item->get('field_icon')->referencedEntities()[0];
              $file = File::load($icon->get('field_media_image')->target_id);
              $method['image'] = $file ? \Drupal::service('file_url_generator')->generateString($file->getFileUri()) : '';
            } else {
              $method['image'] = '';
            }
      
            if (!empty($method['type']) || !empty($method['title']) || !empty($method['value']) || !empty($method['image']) || !empty($method['link'])) {
              $methods[] = $method;
            }
          }
          if (!empty($methods)) {
            $result['section-contact']['contact-methods'] = $methods;
          }
        }
        break;
  }

  return $result;
}

/**
 * Procesa un bloque completo para exportación.
 */
function _custom_json_export_process_block(Block $block) {
  $result = []; // Inicializamos como array vacío, sin valores estáticos

  // Procesar el header (Logo header)
  if ($block->id() === 'logo_header' && $block->getRegion() === 'header') {
    // Obtener el plugin y la configuración del bloque
    $plugin = $block->getPlugin();
    if ($plugin) {
      $configuration = $plugin->getConfiguration();
      $block_content = NULL;

      // Logs de depuración iniciales para el bloque
      \Drupal::logger('custom_json_export')->notice('Procesando bloque Logo header, ID: @id, Región: @region, Plugin: @plugin, Configuración: @config', [
        '@id' => $block->id(),
        '@region' => $block->getRegion(),
        '@plugin' => get_class($plugin) ?: 'NULL',
        '@config' => var_export($configuration, TRUE),
      ]);

      // Intentar obtener la entidad del bloque de contenido
      try {
        if (method_exists($plugin, 'getEntity')) {
          $block_content = $plugin->getEntity();
          \Drupal::logger('custom_json_export')->notice('Entidad del bloque obtenida: @type, Bundle: @bundle, ID: @id, Campos: @fields', [
            '@type' => $block_content ? $block_content->getEntityTypeId() : 'NULL',
            '@bundle' => $block_content && $block_content->getEntityTypeId() === 'block_content' ? $block_content->bundle() : 'N/A',
            '@id' => $block_content ? $block_content->id() : 'NULL',
            '@fields' => $block_content ? implode(', ', array_keys($block_content->getFields())) : 'N/A',
          ]);
        } elseif (method_exists($plugin, 'getDerivativeId')) {
          $derivative_id = $plugin->getDerivativeId();
          \Drupal::logger('custom_json_export')->notice('Derivative ID: @id', ['@id' => $derivative_id ?: 'NULL']);
          
          if ($derivative_id) {
            $block_content = \Drupal::entityTypeManager()->getStorage('block_content')->load($derivative_id);
            if (!$block_content) {
              $blocks = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties(['uuid' => $derivative_id]);
              $block_content = !empty($blocks) ? reset($blocks) : NULL;
            }
            \Drupal::logger('custom_json_export')->notice('Bloque de contenido cargado por ID/UUID: @result, Bundle: @bundle, ID: @id, Campos: @fields', [
              '@result' => $block_content ? 'SI' : 'NO',
              '@bundle' => $block_content ? $block_content->bundle() : 'N/A',
              '@id' => $block_content ? $block_content->id() : 'NULL',
              '@fields' => $block_content ? implode(', ', array_keys($block_content->getFields())) : 'N/A',
            ]);
          }
        }
      } catch (\Exception $e) {
        \Drupal::logger('custom_json_export')->error('Error al obtener la entidad del bloque Logo header: @error, Bloque ID: @id', [
          '@error' => $e->getMessage(),
          '@id' => $block->id(),
        ]);
      }

      // Si encontramos el bloque de contenido, procesar el campo field_imagen
      if ($block_content && $block_content->getEntityTypeId() === 'block_content') {
        \Drupal::logger('custom_json_export')->notice('Procesando bloque de contenido Logo header, ID: @id, Bundle: @bundle, Campos: @fields, Valores field_imagen: @imagen', [
          '@id' => $block_content->id(),
          '@bundle' => $block_content->bundle(),
          '@fields' => implode(', ', array_keys($block_content->getFields())),
          '@imagen' => var_export($block_content->get('field_imagen')->getValue(), TRUE),
        ]);

        // Extraer la imagen (field_imagen) como logo
        if ($block_content->hasField('field_imagen') && !$block_content->get('field_imagen')->isEmpty()) {
          $media = $block_content->get('field_imagen')->referencedEntities()[0];
          \Drupal::logger('custom_json_export')->notice('Media entity encontrada para field_imagen, ID: @id, Bundle: @bundle, Campos: @fields, Valores field_media_image: @media_image', [
            '@id' => $media->id(),
            '@bundle' => $media->bundle(),
            '@fields' => implode(', ', array_keys($media->getFields())),
            '@media_image' => var_export($media->get('field_media_image')->getValue(), TRUE),
          ]);

          $file = File::load($media->get('field_media_image')->target_id);
          if ($file) {
            \Drupal::logger('custom_json_export')->notice('Archivo de imagen encontrado, ID: @id, URI: @uri, Nombre: @filename, Estado: @status', [
              '@id' => $file->id(),
              '@uri' => $file->getFileUri(),
              '@filename' => $file->getFilename(),
              '@status' => $file->isPermanent() ? 'Permanente' : 'Temporal',
            ]);
            $result['logo'] = [
              'src' => file_url_transform_relative(file_create_url($file->getFileUri())),
              'alt' => $media->get('field_media_image')->alt ?: '',
            ];
            \Drupal::logger('custom_json_export')->notice('Logo encontrado, SRC: @src, ALT: @alt', [
              '@src' => $result['logo']['src'],
              '@alt' => $result['logo']['alt'],
            ]);
          } else {
            \Drupal::logger('custom_json_export')->warning('No se pudo cargar el archivo de la imagen para field_imagen, Media ID: @media_id, Target ID: @target_id', [
              '@media_id' => $media->id(),
              '@target_id' => $media->get('field_media_image')->target_id ?? 'No disponible',
            ]);
            // Incluir el logo con src vacío para depuración, pero solo si hay alt
            if ($media->get('field_media_image')->alt) {
              $result['logo'] = [
                'src' => '',
                'alt' => $media->get('field_media_image')->alt,
              ];
            }
          }
        }
      }

      // Obtener elementos de menú desde header-menu
      $menu_name = 'header-menu';
      $menu_tree = \Drupal::menuTree()->load($menu_name, new \Drupal\Core\Menu\MenuTreeParameters());
      $menu_items = [];
      
      foreach ($menu_tree as $menu_link) {
        if (isset($menu_link->link)) {
          $menu_items[] = [
            'label' => strtoupper($menu_link->link->getTitle()),
            'href' => $menu_link->link->getUrlObject()->toString(),
          ];
        }
      }
      
      if (!empty($menu_items)) {
        $result['desktop-menu'] = $menu_items;
        \Drupal::logger('custom_json_export')->notice('Ítems de menú encontrados: @count', ['@count' => count($menu_items)]);
      }
    }
  }

  // Procesar el footer (cualquier bloque en la región footer para depurar)
  elseif ($block->getRegion() === 'footer') {
    $result = [
      'logo' => [
        'src' => '',
        'alt' => 'WDARK Footer Logo',
      ],
      'social-networks' => [],
      'copyright' => '',
      'motto' => [
        'main' => '',
        'secondary' => '',
      ],
    ];

    // Obtener el plugin y la configuración del bloque
    $plugin = $block->getPlugin();
    if ($plugin) {
      $configuration = $plugin->getConfiguration();
      $block_content = NULL;

      // Logs de depuración iniciales para el bloque
      \Drupal::logger('custom_json_export')->notice('Procesando bloque footer, ID: @id, Región: @region, Plugin: @plugin, Configuración: @config', [
        '@id' => $block->id(),
        '@region' => $block->getRegion(),
        '@plugin' => get_class($plugin) ?: 'NULL',
        '@config' => var_export($configuration, TRUE),
      ]);

      // Intentar obtener la entidad del bloque de contenido
      try {
        if (method_exists($plugin, 'getEntity')) {
          $block_content = $plugin->getEntity();
          \Drupal::logger('custom_json_export')->notice('Entidad del bloque obtenida: @type, Bundle: @bundle, ID: @id, Campos: @fields', [
            '@type' => $block_content ? $block_content->getEntityTypeId() : 'NULL',
            '@bundle' => $block_content && $block_content->getEntityTypeId() === 'block_content' ? $block_content->bundle() : 'N/A',
            '@id' => $block_content ? $block_content->id() : 'NULL',
            '@fields' => $block_content ? implode(', ', array_keys($block_content->getFields())) : 'N/A',
          ]);
        } elseif (method_exists($plugin, 'getDerivativeId')) {
          $derivative_id = $plugin->getDerivativeId();
          \Drupal::logger('custom_json_export')->notice('Derivative ID: @id', ['@id' => $derivative_id ?: 'NULL']);
          
          if ($derivative_id) {
            $block_content = \Drupal::entityTypeManager()->getStorage('block_content')->load($derivative_id);
            if (!$block_content) {
              $blocks = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties(['uuid' => $derivative_id]);
              $block_content = !empty($blocks) ? reset($blocks) : NULL;
            }
            \Drupal::logger('custom_json_export')->notice('Bloque de contenido cargado por ID/UUID: @result, Bundle: @bundle, ID: @id, Campos: @fields', [
              '@result' => $block_content ? 'SI' : 'NO',
              '@bundle' => $block_content ? $block_content->bundle() : 'N/A',
              '@id' => $block_content ? $block_content->id() : 'NULL',
              '@fields' => $block_content ? implode(', ', array_keys($block_content->getFields())) : 'N/A',
            ]);
          }
        }
      } catch (\Exception $e) {
        \Drupal::logger('custom_json_export')->error('Error al obtener la entidad del bloque footer: @error, Bloque ID: @id', [
          '@error' => $e->getMessage(),
          '@id' => $block->id(),
        ]);
      }

      // Si encontramos el bloque de contenido, procesar los párrafos
      if ($block_content && $block_content->getEntityTypeId() === 'block_content') {
        \Drupal::logger('custom_json_export')->notice('Procesando bloque de contenido, ID: @id, Bundle: @bundle, Campos: @fields, Valores field_footer: @footer', [
          '@id' => $block_content->id(),
          '@bundle' => $block_content->bundle(),
          '@fields' => implode(', ', array_keys($block_content->getFields())),
          '@footer' => var_export($block_content->get('field_footer')->getValue(), TRUE),
        ]);

        // Verificar el campo field_footer (referencia a párrafos de tipo Footer)
        if ($block_content->hasField('field_footer') && !$block_content->get('field_footer')->isEmpty()) {
          $footer_paragraphs = $block_content->get('field_footer')->referencedEntities();
          \Drupal::logger('custom_json_export')->notice('Párrafos footer encontrados: @count, IDs: @ids, Tipos: @types', [
            '@count' => count($footer_paragraphs),
            '@ids' => implode(', ', array_map(function($p) { return $p->id(); }, $footer_paragraphs)),
            '@types' => implode(', ', array_map(function($p) { return $p->getType(); }, $footer_paragraphs)),
          ]);
          
          foreach ($footer_paragraphs as $footer_paragraph) {
            \Drupal::logger('custom_json_export')->notice('Procesando párrafo, ID: @id, Tipo: @type, Campos: @fields', [
              '@id' => $footer_paragraph->id(),
              '@type' => $footer_paragraph->getType(),
              '@fields' => implode(', ', array_keys($footer_paragraph->getFields())),
            ]);

            if ($footer_paragraph->getType() === 'footer') {
              // Extraer copyright
              if ($footer_paragraph->hasField('field_copyright') && !$footer_paragraph->get('field_copyright')->isEmpty()) {
                $result['copyright'] = $footer_paragraph->get('field_copyright')->value ?: '';
                \Drupal::logger('custom_json_export')->notice('Copyright encontrado: @value', ['@value' => $result['copyright']]);
              }

              // Extraer motto (main y secondary)
              if ($footer_paragraph->hasField('field_main') && !$footer_paragraph->get('field_main')->isEmpty()) {
                $result['motto']['main'] = $footer_paragraph->get('field_main')->value ?: '';
                \Drupal::logger('custom_json_export')->notice('Motto main encontrado: @value', ['@value' => $result['motto']['main']]);
              }
              if ($footer_paragraph->hasField('field_secondary') && !$footer_paragraph->get('field_secondary')->isEmpty()) {
                $result['motto']['secondary'] = $footer_paragraph->get('field_secondary')->value ?: '';
                \Drupal::logger('custom_json_export')->notice('Motto secondary encontrado: @value', ['@value' => $result['motto']['secondary']]);
              }

              // Extraer redes sociales desde field_social (referencia a párrafos social_networks)
              if ($footer_paragraph->hasField('field_social') && !$footer_paragraph->get('field_social')->isEmpty()) {
                $social_networks = [];
                $social_paragraphs = $footer_paragraph->get('field_social')->referencedEntities();
                \Drupal::logger('custom_json_export')->notice('Párrafos social_networks encontrados: @count, IDs: @ids, Tipos: @types', [
                  '@count' => count($social_paragraphs),
                  '@ids' => implode(', ', array_map(function($p) { return $p->id(); }, $social_paragraphs)),
                  '@types' => implode(', ', array_map(function($p) { return $p->getType(); }, $social_paragraphs)),
                ]);
                
                foreach ($social_paragraphs as $social_paragraph) {
                  if ($social_paragraph->getType() === 'social_networks') {
                    \Drupal::logger('custom_json_export')->notice('Procesando red social, ID: @id, Tipo: @type, Campos: @fields', [
                      '@id' => $social_paragraph->id(),
                      '@type' => $social_paragraph->getType(),
                      '@fields' => implode(', ', array_keys($social_paragraph->getFields())),
                    ]);
                    
                    if ($social_paragraph->hasField('field_link') && !$social_paragraph->get('field_link')->isEmpty()) {
                      $link = $social_paragraph->get('field_link')->first();
                      $social_networks[] = [
                        'name' => $link->get('title')->getValue()[0]['value'] ?: '',
                        'url' => $link->getUrl()->toString() ?: '',
                      ];
                      \Drupal::logger('custom_json_export')->notice('Red social encontrada: @name, URL: @url', [
                        '@name' => $social_networks[count($social_networks) - 1]['name'],
                        '@url' => $social_networks[count($social_networks) - 1]['url'],
                      ]);
                    }
                  }
                }
                
                if (!empty($social_networks)) {
                  $result['social-networks'] = $social_networks;
                }
              }
            }
          }
        }

        // Extraer logo (puedes ajustar esto si el logo está en el bloque o en la configuración del tema)
        // Por ahora, asumimos que no hay logo en el bloque footer, pero puedes descomentar y ajustar si está configurado
        /*
        if ($block_content->hasField('field_logo') && !$block_content->get('field_logo')->isEmpty()) {
          $media = $block_content->get('field_logo')->referencedEntities()[0];
          $file = File::load($media->get('field_media_image')->target_id);
          if ($file) {
            $result['logo']['src'] = file_url_transform_relative(file_create_url($file->getFileUri()));
            $result['logo']['alt'] = $media->get('field_media_image')->alt ?: 'WDARK Footer Logo';
          }
        }
        */
      }
    }
  }

  // Ajustar el filtro para mantener arrays incluso si algunos valores están vacíos, pero no el array completo
  $result = array_filter($result, function ($value) {
    if (is_array($value)) {
      // Mantener arrays si tienen al menos un valor no vacío o si es un array con claves (como logo con src o alt)
      return count($value) > 0 && (isset($value['src']) || isset($value['alt']) || count(array_filter($value)) > 0);
    }
    return !empty($value);
  });

  // Logs de depuración mejorados
  \Drupal::logger('custom_json_export')->notice('Procesando bloque @id, Región: @region, Logo SRC: @src, Menú ítems: @menu_count, Copyright: @copyright, Social Networks: @social_count', [
    '@id' => $block->id(),
    '@region' => $block->getRegion(),
    '@src' => isset($result['logo']['src']) ? $result['logo']['src'] : 'No encontrado',
    '@menu_count' => $block->getRegion() === 'header' ? count($result['desktop-menu'] ?? []) : 0,
    '@copyright' => $result['copyright'] ?? 'No encontrado',
    '@social_count' => $block->getRegion() === 'footer' ? count($result['social-networks'] ?? []) : 0,
  ]);

  return $result;
}